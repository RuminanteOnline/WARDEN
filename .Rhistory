ds_df[,evt_num:= 1:.N,by=.id]
ds_df[,evt_count:= .N,by=.id]
if(return_ind_rate==TRUE){
rate_par_df <- data.table(.id=1:length(rate_par),
ind_rate = rate_par)
ds_df <- merge(ds_df,rate_par_df)
}
return(ds_df)
#If the rate parameters have to be returned, modify the return structure to accommodate them
} else{
if(return_ind_rate==TRUE){
return(list(tte=ds,ind_rate=rate_par))
}  else{
return(ds)
}
}
}
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma2 <- function(n, rate, theta=NULL, obs_time=1, t_reps, seed=NULL,return_ind_rate=FALSE, return_df=FALSE){
# Create data with sampled event times for n observations and t_reps replications
# Approach is different for Poisson and PG to optimize run time
# If t_reps not provided, derive based on 99.9th quantile of Poisson or negative binomial distribution
if(is.null(theta)){
# Missing theta produces event time draws for a Poisson process
if (missing(t_reps)) t_reps <- qpois(0.9999, lambda=rate*obs_time)
# Determine the number of time replications needed
# Based on 99.99th quantile of Poisson  distribution
#Draw the relevant tte that we will after filter for those which actually occured
if(!is.null(seed)){
set.seed(seed)
}
ds <- lapply(1:n, function(x) cumsum(rexp(n*t_reps, rate=rate)))
} else{
# Theta specified; produce event times for Poisson-gamma/NB
if (missing(t_reps)) t_reps <- qnbinom(0.9999, size=theta, mu=rate*obs_time)
# Determine the number of time replications needed
# Based on 99.99th quantile of NB  distribution
# For Poisson-Gamma, individual rates are first sampled from a Gamma distribution
rate_par <- rgamma(n = n, shape = theta, scale = rate/theta)
if(!is.null(seed)){
set.seed(seed)
}
ds <- lapply(1:n, function(x)
cumsum(
rexp(t_reps,
rate=rate_par[x]
)
)
)
}
# Process sampled times between events to derive actual event times (as cumulative of time between events)
# Determine which are observable - i.e., within the obs_time set in argument
# Flag observable events and derive count of observable events per individual
# Retain only observable events
#Get which observations occur within time period and remove unobserved events
ds <- lapply(ds, function(x) x[x<=obs_time])
#If return as data frame is activated
if (return_df==TRUE) {
ds_df <- lapply(ds, function(x) data.frame(tte=x))
ds_df <- rbindlist(ds_df,idcol=TRUE)
ds_df[,t_btw_evt:= tte-shift(tte,fill = 0),by=.id]
ds_df[,evt_num:= 1:.N,by=.id]
ds_df[,evt_count:= .N,by=.id]
if(return_ind_rate==TRUE){
rate_par_df <- data.table(.id=1:length(rate_par),
ind_rate = rate_par)
ds_df <- merge(ds_df,rate_par_df)
}
return(ds_df)
#If the rate parameters have to be returned, modify the return structure to accommodate them
} else{
if(return_ind_rate==TRUE){
return(list(tte=ds,ind_rate=rate_par))
}  else{
return(ds)
}
}
}
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
devtools::load_all()
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE)[]
,seed=1
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,seed=1)[]
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,seed=1)[]
?rpoisgamma
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
set.seed(1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma_times(n=1,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
debug(rpoisgamma)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
nrow(ds_df)
devotols::load_all()
devtools::load_all()
undebug(rpoisgamma)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
devtools::load_all()
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
devtools::load_all()
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=2,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=3,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=2)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=2)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=2)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=3)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=3)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=3)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=3)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=3)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=3)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=4)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=4)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=4)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=4)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=4)[]
# set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=4)[]
devtools::load_all()
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=1,rate=1,theta=1,obs_time=1,seed=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=1,rate=1,theta=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
# --------------------------------------------------------------------------------------------------------------------------------------
# Function:     rpoisgamma_times
#
# Description:  Function to simulate event times from a Poisson or Poisson-Gamma (PG) Mixture/Negative Binomial (NB) Process
#               Event times are determined by sampling times between events (TBEs) from an exponential distribution, and cumulating
#               these to derive the event times. Events occurring within the set observation time window are retained and returned.
#               For times for a Poisson process, the provided rate is assumed constant.
#               For a PG or NB, the individual rates are sampled from a Gamma distribution with shape = theta and scale = rate/theta.
#
# Author:       K. Jack Ishak PhD
#
# Last Update:  29Feb24
#
# Arguments:
#  n:           number of individuals to be simulated
#
#  rate:        rate of the event (in terms of events per person-time)
#
#  obs.time:    period over which events are observable
#
#  theta:       Optional.  When omitted, the function simulates times for a Poisson process.
#               Represents the shape of the gamma mixture distribution.
#               Estimated and reported as theta in negative binomial regression analyses in r.
#
#  t.reps:      Optional. Number of TBEs to be generated to capture events within the observation window.
#               When omitted, the function sets t.reps to the 99.99th quantile of the Poisson (if no theta is provided)
#               or negative binomial (if theta is provided). Thus, the risk of missing possible events in the observation window
#               is 0.01%.
#
#  ID.varname:  Optional. Name to assign to the ID variable created by the function. Default is "ID".
#
# Output:       Returns a data.frame with ID, individual rate, event number, event count, time between events and event times.
#
# --------------------------------------------------------------------------------------------------------------------------------------
rpoisgamma_times <- function(n, rate, obs.time, theta, t.reps, ID.varname="ID"){
library(tidyr)
# Create a data frame with sampled event times for n observations and t.reps replications
# Approach is different for Poisson and PG to optimize run time
# If t.reps not provided, derive ased on 99.9th quantile of Poisson or negative binomial distribution
# -----------------------------------------------------------------------------------------------------------
if(missing(theta)){
# Missing theta produces event time draws for a Poisson process
if (missing(t.reps)) t.reps <- qpois(0.9999, lambda=rate*obs.time)
# Determine the number of time replications needed
# Based on 99.99th quantile of Poisson  distribution
DS <- cbind(tidyr::crossing(ID=seq(1,n), Ind.Rate=rate, Event.Num=seq(1, t.reps)),
# For Poisson, the rate is used as a fixed value
"Time.btw.Events" = stats::rexp(n*t.reps, rate=rate)) %>%
arrange(ID)
} else{
# Theta specified; produce event times for Poisson-gamma/NB
if (missing(t.reps)) t.reps <- qnbinom(0.9999, size=theta, mu=rate*obs.time)
# Determine the number of time replications needed
# Based on 99.99th quantile of NB  distribution
# For Poisson-Gamma, individual rates are first sampled from a Gamma distribution
DS <- tidyr::crossing(data.frame(ID=seq(1,n),
Ind.Rate=stats::rgamma(n=n, shape=theta, scale=rate/theta)),
Event.Num=seq(1, t.reps)) %>%
arrange(ID) %>%
group_by(ID) %>%
rowwise() %>%
mutate(Time.btw.Events = stats::rexp(1, rate=Ind.Rate))
}
# Process sampled times between events to derive actual event times (as cumulative of time between events)
# Determine which are observable - i.e., within the obs.time set in argument
# Flag observable events and derive count of observable events per individual
# Retain only observable events in data frame
# -----------------------------------------------------------------------------------------------------------
# Save IDs and Ind.Rates to merge back in later for those with no observable events
DS.ID <- DS %>% group_by(ID) %>% slice(1) %>% dplyr::select(ID, Ind.Rate)
DS <- DS %>%
group_by(ID) %>%
mutate(Event.Time = cumsum(Time.btw.Events),           # cumulative sum of times within IDs
observable.event = Event.Time <= obs.time,      # flag observable events: cumulative time <= obs.time
Event.Count = sum(observable.event))  %>%       # number of observable events
filter(observable.event) %>%
dplyr::select(-observable.event)
# Merge back with full list of IDs to capture those with 0 events
# -----------------------------------------------------------------------------------------------------------
DS <- merge(DS.ID, DS, by=c("ID", "Ind.Rate"), all.x=TRUE) %>%
arrange(ID) %>%
mutate(Event.Count=ifelse(is.na(Event.Count), 0, Event.Count))
# Return the dataframe
# -----------------------------------------------------------------------------------------------------------
return(DS)
}
#' Draw time to event (tte) from a Poisson or Poisson-Gamma (PG) Mixture/Negative Binomial (NB) Process
#'
#' @param n The number of observations to be drawn
#' @param rate rate of the event (in terms of events per observation-time)
#' @param obs_time period over which events are observable
#' @param theta Optional.  When omitted, the function simulates times for a Poisson process.
#'               Represents the shape of the gamma mixture distribution.
#'               Estimated and reported as theta in negative binomial regression analyses in r.
#' @param t_reps Optional. Number of TBEs to be generated to capture events within the observation window.
#'               When omitted, the function sets t_reps to the 99.99th quantile of the Poisson (if no theta is provided)
#'               or negative binomial (if theta is provided). Thus, the risk of missing possible events in the observation window
#'               is 0.01%.
#' @param seed An integer which will be used to set the seed for this draw.
#' @param return_gamma_par A boolean that indicates whether an additional vector with the gamma parameters used per n is used.
#'          It will alter the structure of the results to two lists, one storing tte with name tte, and the other with name gamma_pars
#'
#' @return Estimate(s) from the time to event based on poisson/Poisson-Gamma (PG) Mixture/Negative Binomial (NB) distribution based on given parameters
#'
#' @importFrom stats qpois
#' @importFrom stats rexp
#' @importFrom stats rgamma
#' @importFrom stats qnbinom
#'
#' @export
#'
#' @details
#' Function to simulate event times from a Poisson or Poisson-Gamma (PG) Mixture/Negative Binomial (NB) Process
#' Event times are determined by sampling times between events (TBEs) from an exponential distribution, and cumulating
#' these to derive the event times. Events occurring within the set observation time window are retained and returned.
#' For times for a Poisson process, the provided rate is assumed constant.
#' For a PG or NB, the individual rates are sampled from a Gamma distribution with shape = theta and scale = rate/theta.
#'
#' @examples
#' rpoisgamma(1,rate=1,obs_time=1,theta=1)
rpoisgamma2 <- function(n, rate, obs_time=1, theta, t_reps, seed=NULL,return_gamma_par=FALSE){
# Create data with sampled event times for n observations and t_reps replications
# Approach is different for Poisson and PG to optimize run time
# If t_reps not provided, derive based on 99.9th quantile of Poisson or negative binomial distribution
if(!is.null(seed)){
set.seed(seed)
}
if(missing(theta)){
# Missing theta produces event time draws for a Poisson process
if (missing(t_reps)) t_reps <- qpois(0.9999, lambda=rate*obs_time)
# Determine the number of time replications needed
# Based on 99.99th quantile of Poisson  distribution
#Draw the relevant tte that we will after filter for those which actually occured
ds <- lapply(1:n, function(x) cumsum(rexp(n*t_reps, rate=rate)))
} else{
# Theta specified; produce event times for Poisson-gamma/NB
if (missing(t_reps)) t_reps <- qnbinom(0.9999, size=theta, mu=rate*obs_time)
# Determine the number of time replications needed
# Based on 99.99th quantile of NB  distribution
# For Poisson-Gamma, individual rates are first sampled from a Gamma distribution
gamma_pars <- rgamma(n = n, shape = theta, scale = rate/theta)
ds <- lapply(1:n, function(x)
cumsum(
rexp(t_reps,
rate=gamma_pars[x]
)
)
)
}
# Process sampled times between events to derive actual event times (as cumulative of time between events)
# Determine which are observable - i.e., within the obs_time set in argument
# Flag observable events and derive count of observable events per individual
# Retain only observable events
#Get which observations occur within time period and remove unobserved events
ds <- lapply(ds, function(x) x[x<=obs_time])
#If the gamma parameters have to be returned, modify the return structure to accommodate them
if(return_gamma_par==TRUE){
return(list(tte=ds,gamma_pars=gamma_pars))
}  else{
return(ds)
}
}
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
devtools::load_all()
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=1,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
devtools::load_all()
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,obs_time=1,seed=1)
devtools::load_all()
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,theta=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=FALSE,seed=1)[]
rpoisgamma2(n=5,rate=1,obs_time=1,seed=1)
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=FALSE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=TRUE,seed=1)[]
debug(rpoisgamma)
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=TRUE,seed=1)[]
rate
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=TRUE,seed=1)[]
undebug(rpoisgamma)
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,theta=1,obs.time=1)
rpoisgamma(n=5,rate=1,theta=1,obs_time=1,return_df=TRUE,seed=1)[]
set.seed(1)
rpoisgamma_times(n=5,rate=1,obs.time=1)
rpoisgamma(n=5,rate=1,obs_time=1,return_df=TRUE,seed=1)[]
devtools::build_site()
.Llast.error
.Last.error
devtools::load_all()
draw_dirichlet_prob(n=2,alpha= matrix(c(0.7,0.3,0,0.1,0.7,0.2,0.1,0.2,0.7),3,3),se=matrix(c(0.7,0.3,0,0.1,0.7,0.2,0.1,0.2,0.7)/10,3,3))
draw_dirichlet_prob(n=1,alpha= matrix(c(0.7,0.3,0,0.1,0.7,0.2,0.1,0.2,0.7),3,3),se=matrix(c(0.7,0.3,0,0.1,0.7,0.2,0.1,0.2,0.7)/10,3,3))
draw_dirichlet(n=1,alpha= matrix(c(1251, 0, 350, 731),2,2))
draw_dirichlet(n=2,alpha= matrix(c(1251, 0, 350, 731),2,2))
draw_beta(n=1,mean_v=0.8,se=0.2)
draw_gamma(n=1,mean_v=0.8,se=0.2)
rpoisgamma(1,rate=1,obs_time=1,theta=1)
devtools::check()
devtools::document()
devtools::build_site()
devtools::install()
devtools::build_site()
devtools::build_vignettes()
draw_gamma(10,10)
devtools::load_all()
draw_gamma(10,10)
devtools::document()
devtools::build_site()
devtools::build_site()
