results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(y=1, x = stop()),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(y=1, x = stop()),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
devtools::load_all()
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(y=1, x = stop()),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
devtools::load_all()
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(y=1, x = stop()),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(y=1, x = stop()),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = stop()),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
devtools::load_all()
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=2,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = FALSE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
View(results)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = FALSE, continue_on_error = TRUE
)
evt_react_list <-
add_reactevt(name_evt = "sick",
input = {}) %>%
add_reactevt(name_evt = "sicker",
input = {
modify_item(list(q_default = util.sicker,
c_default = cost.sicker + if(arm=="int"){cost.int}else{0},
fl.sick = 0))
}) %>%
add_reactevt(name_evt = "death",
input = {
modify_item(list(q_default = 0,
c_default = 0,
curtime = Inf))
})
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = FALSE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x = 5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = TRUE, continue_on_error = TRUE
)
results <- run_sim_parallel(
npats=1000,                               # number of patients to be simulated
n_sim=3,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
sensitivity_inputs = add_item(x=5),
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1, debug = FALSE, continue_on_error = TRUE, ncores = 3
)
usethis::use_logo("inst/figures/WARDEN_logo_small.png")
pkgdown::build_favicons()
devtools::build_readme()
tools::check_packages_in_dir(reverse = list())
tools::check_packages_in_dir(reverse = list(),dir=wd())
tools::check_packages_in_dir(reverse = list(),dir=here::here())
install.packages("here")
tools::check_packages_in_dir(reverse = list(),dir=here::here())
build_site_github_pages(clean = TRUE, install = TRUE)
devtools::document()
pkgdown::build_site_github_pages(clean = TRUE, install = TRUE)
pkgdown::preview_site(path='reference/rdirichlet.html')
pkgdown::build_site_github_pages(clean = TRUE, install = TRUE)
?check
devtools::check()
expr <- substitute({
a <- sum(5+7)
modify_item(list(afsa=ifelse(TRUE,"asda",NULL)))
modify_item_seq(list(
o_other_q_gold1 = if(gold == 1) { utility } else { 0 },
o_other_q_gold2 = if(gold == 2) { utility } else { 0 },
o_other_q_gold3 = if(gold == 3) { utility } else { 0 },
o_other_q_gold4 = if(gold == 4) { utility } else { 0 },
o_other_q_on_dup = if(on_dup) { utility } else { 0 }
))
if(a==1){
modify_item(list(a=list(6+b)))
modify_event(list(e_exn = curtime + 14 / days_in_year + qexp(rnd_exn, r_exn)))
} else{
modify_event(list(e_exn = curtime + 14 / days_in_year + qexp(rnd_exn, r_exn)))
if(a>6){
modify_item(list(a=8))
}
}
if (sel_resp_incl == 1 & on_dup == 1) {
modify_event(list(e_response = curtime, z = 6))
}
})
out <- ast_as_list(expr)
results <- extract_elements_from_list(out)
View(results)
devtools::document()
pkgdown::build_site_github_pages(clean = FALSE)
devtools::check()
devtools::document()
devtools::check()
expr <- substitute({
a <- sum(5+7)
modify_item(list(afsa=ifelse(TRUE,"asda",NULL)))
modify_item_seq(list(
o_other_q_gold1 = if(gold == 1) { utility } else { 0 },
o_other_q_gold2 = if(gold == 2) { utility } else { 0 },
o_other_q_gold3 = if(gold == 3) { utility } else { 0 },
o_other_q_gold4 = if(gold == 4) { utility } else { 0 },
o_other_q_on_dup = if(on_dup) { utility } else { 0 }
))
if(a==1){
modify_item(list(a=list(6+b)))
modify_event(list(e_exn = curtime + 14 / days_in_year + qexp(rnd_exn, r_exn)))
} else{
modify_event(list(e_exn = curtime + 14 / days_in_year + qexp(rnd_exn, r_exn)))
if(a>6){
modify_item(list(a=8))
}
}
if (sel_resp_incl == 1 & on_dup == 1) {
modify_event(list(e_response = curtime, z = 6))
}
})
out <- ast_as_list(expr)
results <- extract_elements_from_list(out)
devtools::document()
devtools::check()
pkgdown::build_site_github_pages(clean = FALSE)
devtools::document()
pkgdown::build_site_github_pages(clean = FALSE)
usethis::use_github_action_check_standard()
_setkey()
?setkey()
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE
)
library(WARDEN)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(purrr)
options(scipen = 999)
options(digits=3)
options(tibble.print_max = 50)
#We don't need to use sensitivity_inputs here, so we don't add that object
#Put objects here that do not change on any patient or intervention loop
common_all_inputs <-add_item(
util.sick = 0.8,
util.sicker = 0.5,
cost.sick = 3000,
cost.sicker = 7000,
cost.int = 1000,
coef_noint = log(0.2),
HR_int = 0.8,
drc = 0.035, #different values than what's assumed by default
drq = 0.035,
random_seed_sicker_i = sample.int(100000,1000,replace = FALSE)
)  #to be used as seeds to draw the time to event for sicker, to ensure same luck for the same patient independently of the arm
#Put objects here that do not change as we loop through treatments for a patient
common_pt_inputs <- add_item(death= max(0.0000001,rnorm(n=1, mean=12, sd=3)))
#Put objects here that change as we loop through treatments for each patient (e.g. events can affect fl.tx, but events do not affect nat.os.s)
unique_pt_inputs <- add_item(fl.sick = 1,
q_default = util.sick,
c_default = cost.sick + if(arm=="int"){cost.int}else{0})
init_event_list <-
add_tte(arm=c("noint","int"), evts = c("sick","sicker","death") ,input={
sick <- 0
sicker <- draw_tte(1,dist="exp", coef1=coef_noint, beta_tx = ifelse(arm=="int",HR_int,1), seed = random_seed_sicker_i[i]) #this way the value would be the same if it wasn't for the HR, effectively "cloning" patients luck
})
evt_react_list <-
add_reactevt(name_evt = "sick",
input = {}) %>%
add_reactevt(name_evt = "sicker",
input = {
modify_item(list(q_default = util.sicker,
c_default = cost.sicker + if(arm=="int"){cost.int}else{0},
fl.sick = 0))
}) %>%
add_reactevt(name_evt = "death",
input = {
modify_item(list(q_default = 0,
c_default = 0,
curtime = Inf))
})
df_interactions <- extract_from_reactions(evt_react_list)
kable(df_interactions)
util_ongoing <- "q_default"
cost_ongoing <- "c_default"
#Logic is: per patient, per intervention, per event, react to that event.
results <- run_sim(
npats=1000,                               # number of patients to be simulated
n_sim=1,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1
)
View(patdata_dt)
devtools::load_all()
results <- run_sim(
npats=10000,                               # number of patients to be simulated
n_sim=1,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1
)
?sample.int
#We don't need to use sensitivity_inputs here, so we don't add that object
#Put objects here that do not change on any patient or intervention loop
common_all_inputs <-add_item(
util.sick = 0.8,
util.sicker = 0.5,
cost.sick = 3000,
cost.sicker = 7000,
cost.int = 1000,
coef_noint = log(0.2),
HR_int = 0.8,
drc = 0.035, #different values than what's assumed by default
drq = 0.035,
random_seed_sicker_i = sample.int(100000,100000,replace = FALSE)
)  #to be used as seeds to draw the time to event for sicker, to ensure same luck for the same patient independently of the arm
#Put objects here that do not change as we loop through treatments for a patient
common_pt_inputs <- add_item(death= max(0.0000001,rnorm(n=1, mean=12, sd=3)))
#Put objects here that change as we loop through treatments for each patient (e.g. events can affect fl.tx, but events do not affect nat.os.s)
unique_pt_inputs <- add_item(fl.sick = 1,
q_default = util.sick,
c_default = cost.sick + if(arm=="int"){cost.int}else{0})
results <- run_sim(
npats=10000,                               # number of patients to be simulated
n_sim=1,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1
)
devtools::load_all()
results <- run_sim(
npats=10000,                               # number of patients to be simulated
n_sim=1,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1
)
results <- run_sim(
npats=10000,                               # number of patients to be simulated
n_sim=1,                                  # number of simulations to run
psa_bool = FALSE,                         # use PSA or not. If n_sim > 1 and psa_bool = FALSE, then difference in outcomes is due to sampling (number of pats simulated)
arm_list = c("int", "noint"),             # intervention list
common_all_inputs = common_all_inputs,    # inputs common that do not change within a simulation
common_pt_inputs = common_pt_inputs,      # inputs that change within a simulation but are not affected by the intervention
unique_pt_inputs = unique_pt_inputs,      # inputs that change within a simulation between interventions
init_event_list = init_event_list,        # initial event list
evt_react_list = evt_react_list,          # reaction of events
util_ongoing_list = util_ongoing,
cost_ongoing_list = cost_ongoing,
ipd = 1
)
devtools::check()
devtools::build()
help(lm,help_type="pdf")
install.packages("tinytex")
install.packages("tinytex")
?texi2pdf
\dontrun{
devtools::build()
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('extract_psa_result')
devtools::build()
system("R CMD Rd2pdf --no-preview --output=./documentation-peek.pdf ." )
devtools::build()
devtools::document()
pkgdown::build_site_github_pages(clean = TRUE)
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_site_github_pages(clean = FALSE)
devtools::build()
