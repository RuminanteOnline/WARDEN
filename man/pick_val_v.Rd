% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input_f.R
\name{pick_val_v}
\alias{pick_val_v}
\title{Select which values should be applied in the corresponding loop for several values (vector or list).}
\usage{
pick_val_v(
  base,
  psa,
  sens,
  psa_ind = psa_bool,
  sens_ind = sens_bool,
  indicator,
  indicator_psa = NULL,
  names_out = NULL
)
}
\arguments{
\item{base}{Value if no PSA/DSA/Scenario}

\item{psa}{Value if PSA}

\item{sens}{Value if DSA/Scenario}

\item{psa_ind}{Boolean whether PSA is active}

\item{sens_ind}{Boolean whether Scenario/DSA is active}

\item{indicator}{Indicator which checks whether the specific parameter/parameters is/are active in the DSA or Scenario loop}

\item{indicator_psa}{Indicator which checks whether the specific parameter/parameters is/are active in the PSA loop.
If NULL, it's assumed to be a vector of 1s of length equal to length(indicator)}

\item{names_out}{Names to give the output list}
}
\value{
List of used for the inputs
}
\description{
Select which values should be applied in the corresponding loop for several values (vector or list).
}
\details{
This function can be used with vectors or lists, but will always return a list.
Lists should be used when correlated variables are introduced to make sure the selector knows how to choose among those
}
\examples{
\dontrun{
pick_val_v(base = c(0,0),
           psa =c(rnorm(1,0,0.1),rnorm(1,0,0.1)),
           sens = c(2,3),
           psa_ind = TRUE,
           sens_ind = FALSE,
           indicator=c(1,0)
           )
           
pick_val_v(base = c(0,0),
psa =c(rnorm(1,0,0.1),rnorm(1,0,0.1)),
sens = c(2,3),
psa_ind = TRUE,
sens_ind = TRUE,
indicator=c(1,0),
indicator_psa=c(0,1)
)
pick_val_v(base = c(c(2,3),list(c(1,2))),
            psa =sapply(1:3,
                        function(x) eval(call(
                          c("rnorm","rnorm","mvrnorm")[[x]],
                          1,
                          c(c(2,3),list(c(1,2)))[[x]],
                          c(c(0.1,0.1),list(matrix(c(1,0.1,0.1,1),2,2)))[[x]]
                        ))),
            sens = c(c(2,3),list(c(1,2))),
            psa_ind = TRUE,
            sens_ind = FALSE,
            indicator=c(1,0,0),
            names_out=c("util","util2","correlated_vector")
           )

pick_val_v(base        = df_par[,"base_value"],
           psa         = sapply(1:nrow(df_par), function(x)
                           eval(call(df_par[x,"PSA_dist"],1,df_par[x,"a"],df_par[x,"b"]))),
           sens        = df_par[,sensitivity_names[sens_sel]],
           psa_ind     = TRUE, sens_ind = FALSE,
           indicator   = indicators,
           names_out   = df_par[,"parameter_name"]
           )
           
 pick_val_v(
  base = c(0,0),
  psa =c(rnorm(1,0,0.1),rnorm(1,0,0.1)),
  sens = c(2,3),
  psa_ind = TRUE,
  sens_ind = TRUE,
  indicator=create_indicators(sens=1,n_sensitivity=2,n_elem = 2)
 )
 
}
}
